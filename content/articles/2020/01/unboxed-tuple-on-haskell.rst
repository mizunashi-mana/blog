GHC 拡張 UnboxedTuple と多値返却
================================

:date: 2019-01-10 20:00
:tags: Haskell, GHC拡張, GHC, 多値
:category: プログラミング言語

多くのプログラミング言語では，関数は複数の引数が取れる．しかし，その一方で関数の返り値は一つだけの言語が多い．最近の言語では，これを打開するためタプルという複数の値をまとめて一つの値として扱う機能が搭載されている．この機能を使えば，複数の返り値を模倣できる．しかし，引数がタプルを受け取っているわけではないことを考えれば，この解決策はあくまで模倣ということになる．実際に， Go や Lua， Scheme などの言語では，このタプルによる模倣とは別に，多値返却と呼ばれる複数の値を返す機能を提供している．

さて， Haskell はそもそも全ての関数がカリー化されていて一引数であり，返り値も一つという，複数の引数と多値返却を持つ言語とは，また別の意味で一貫性のあるデザインになっているが，これは言語デザインの面ではということであり， GHC の裏側では，実際にはやはり複数の引数を持ち一つの返り値を持つ関数に翻訳されることになる [#notice-tailcall]_ ．ところが GHC の裏側はデザイン上，多値返却を表現できるようになっており，言語上は ``UnboxedTuples`` という拡張で明示的に利用できるようになっている．今回は， ``UnboxedTuples`` 拡張の紹介と，この拡張が GHC の裏側でどのように動くかについて見ていく．

多値返却
--------



.. [#notice-tailcall] というのが嘘だということは，後ほど説明する．まあ，とりあえずはかなり語弊があるが，ストーリー上そういうものとして話を進めていく．
